<?xml version="1.0" encoding="UTF-8"?>
<!--
Tip：
    只需要在配置属性类才需要@Component
    对应的，只有在有@Component, Service, Controller ...
    才需要加 @Bean

    在进行修改单条数据的DTO设计的时候一定要设置id，否则会找不到修改的是哪条数据
    还有就是在进行VO设计的时候，添加id属性

    在xml编写sql语句时，不要加“分号；”，否则会报错

    关于如何在 增加医生 里绑定科室时，如何让前端输入科室名，但是后端改成id？
    答：创建一个DTO类，添加临时字段，用于前端传递，后端不映射数据库
    然后在Controller中，将前端传递的科室名转换为id，再传递给Service
    因为Controller负责数据转换，Service专注业务逻辑

    如果你要实现下拉框实现的是名字而非id？
      答：创建一个Option类存放名称和id，创建对应的/xxx-options的Get接口
-->


<!-- 专题一：《Swagger.v3-接口文档》相关学习 -->
<!--
    专题一：《Swagger.v3-接口文档》相关学习

    一、什么是Swagger.v3？
        Swagger-v3 是一个API文档生成和测试工具
        1. 作用：
            - 自动生成API文档     - 提供在线API测试界面    - 标准化API接口定义
    二、常用方法：
        - OpenAPI.info() -> 全局API配置    |   .
        - Info.title()   -> API标题       |   .description() -> API描述       |  .version() -> API版本
              .contact() -> 配置联系人信息  |
        - Contact.name() -> 联系人姓名     |   .email() -> 联系人邮箱            |  .url() ：联系人网址

        - GroupedOpenApi 表示 分组API配置，需要定义属性 group(分组组名), pathsToMatch(路径匹配), packagesToScan(Controller包扫描)
          比如.group("admin").pathsToMatch("/admin/**").packagesToScan("com.medical.controller.admin")
    三、如何使用Swagger.v3
            - 导入依赖：
                · knife4j-openapi3-jakarta-spring-boot-starter
            - 先创建一个Configuration类, 加上注解@Configuration
            - 在该类生成一个返回对象为OpenAPI全局API配置的方法
            - 声明子分组API配置方法
-->

<!-- 专题一：SpringAOP相关知识 -->
<!--
    专题一：SpringAOP相关知识

    一、如何专门指定拦截的类/方法？
        答：通过自定义注解的方式
        （给需要拦截的方法打上标记，用MethodSignature来接收，然后把标记.get转变为AutoFill）
        - 首先，创建一个自定义注解类(class -> @interface)，加上注解：
            · @Target(ElementType.METHOD)           表示该注解作用在方法上
            · @Retention(RetentionPolicy.RUNTIME)   表示该注解在运行时生效

        - 然后，在注解类中加上固定方法：OperationType value()   表示该注解有一个属性value，类型为OperationType
          并在注解类中定义一个枚举类OperationType，表示该注解的value属性的值只能是枚举类中的值

        - 而后，创建接口处理类 AutoFillAspect.java 加上注解@Aspect

        - 之后，在声明@Pointcut("execution(...) 时，后续还要加上注解的全类名：
          &&  @annotation(com.medical.annotation.AutoFill)")

        - 最后，在需要拦截的方法上加上该注解：@AutoFill(OperationType.INSERT)

    二、如何通过SpringAOP获取方法参数？
        答：用joinPoint.getSignature()来接收MethodSignature标记 ->
        然后把 标记.getMethod().getAnnotations(AutoFill.class) 转变为AutoFill

    三、AOP相关的API：
        1）对象是JoinPoint的话：
            - .getSignature()  -> 获取方法签名         - .getArgs()     -> 获取方法参数
            - .getTarget()     -> 获取目标对象
        2）对象是 SignatureMethod 的话：（处于JoinPoint和Method之间的一个类）
            - .getMethod()     -> 获取Method
            - .getDeclaringType()  -> 获取声明该方法的类型（加上Name就是获取类名）
            - .getExceptionTypes() -> 获取方法抛出的异常类型
        3）对象是 Method 的话：
            - .getArgs() -> 获取方法参数
            - .getAnnotation( 注解类名.class ) -> 获取指定类型的注解
            - .getAnnotations() -> 获取所有注解
            - .isAnnotationPresent(Class) -> 判断是否有指定注解
            - .invoke(A, B) -> 调用方法, 将B中的参数映射到A中
            - 和上SignatureMethod一样：
                .getName() -> 获取方法名     .getReturnType() -> 获取方法返回值类
                .getModifiers() -> 获取方法修饰符
        4）对象是xxx.getClass()
            - getDeclaredMethod("方法名", 方法返回值类型.class) -> 获取指定方法，后可以通过.invoke()调用方法

    Tip：什么是目标对象？
    答：就是被拦截的方法所属的类的对象（比如add -> AdminServiceImpl -> adminServiceImpl）
-->

<!-- 专题二：关于给前端VO为什么要id的问题 -->
<!--
    专题二：关于给前端VO为什么要id的问题

    Q：为什么给前端VO对象要id属性？
    A：因为前端需要根据后端传过来的VO中id来删除数据，所以要给前端VO对象要id属性
-->

<!-- 专题三：关于Configuration相关 -->
<!--
    专题三：关于WebMvcConfiguration.java相关

    一、后端传给前端的日期会变成 2025,7,19,21,42,6（接口文档），202571921426（前后端联调）的格式
       需要怎么转换？
    答: 所以需要对
        · 方式一: 属性进行@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")注解，只针对单个注解
        · 方式二: 全局统一日期格式，在WebMvcConfiguration.java 中添加 SpringMVC 的 消息转换器
                 统一对日期进行格式化处理
        @Override
        protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {
            MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
            converter.setObjectMapper(new JacksonObjectMapper());
            定义时间格式，注册时间序列化器（见WebMvcConfiguration.java）
            objectMapper.registerModule(javaTimeModule);
            converter.setObjectMapper(objectMapper);
            converters.add(0, converter);   // 0这里表示优先级，越小越优先，我们不能直接填0，需要找到合适的位置
        }

    二、文件上传怎么进行？
    答:
        1）在此之前导入依赖：aliyun-sdk-oss
        2）创建一个 properties/AliOssProperties 用来 从yml获取并存放配置阿里云的OSS 的属性
            注解：@ConfigurationProperties(prefix = "aliyun.oss")表示获取yml中的属性并存放
            endpoint, accessKeyId, accessKeySecret, bucketName
        3）创建一个核心工具类：AliOssUtil，不用@Component
            属性设置：endpoint、accessKeyId、accessKeySecret, bucketName
            - 创建方法： byte指的是"要上传的文件字节数组"，fileName是"文件名"，不需要@Bean
                upload(byte[] bytes, String fileName){}
            - 创建一个ossClient客户端：
                OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);
            - try 一个 ossClient.putObject 上传文件请求，最后finally里要关闭ossClient
                ossClient.putObject(bucketName, fileName, new ByteArrayInputStream(bytes))
                ... -> ossClient.shutdown();
            - 构建访问URL
                !!!格式：http:// {bucketName} . {endpoint.replace("https://", "")} / {fileName}
                StringBuilder url = new StringBuilder("http://");
                url.append(bucketName).append(".").append(endpoint.replace("https://", ""))
                .append("/").append(fileName);
                return url.toString();
        4）编写配置类：OSSConfiguration，创建方法
            public AliOssUtil aliOssUtil(AliOssProperties aliOssProperties){
                return new AliOssUtil(aliOssProperties.四个get);
            }
        5）创建common/Controller中创建接口：
            - 上传文件：admin/common/upload  |   Method： POST
            - 请求参数：MultipartFile file
            - 过程：
                · 通过 file.getOriginalFilename() 获取 全文件名 -> 通过分割字符串获得 拓展名
                · 通过UUid.randomUUID() 获取加工后的文件名 -> 和 拓展名 组合 -> 拼接成新的文件名
                · 通过阿里云工具类上传文件{ aliOssUtil.update(file.getByte(), 新文件名) }
-->

<!-- 专题四：关于MyBatis -->
<!--
    专题四：关于MyBatis

    一、关于@RequestParam注解什么情况才需要加？
    答：最好是在不需要加@RequestBody和@@PathVariable注解的参数
       时加上@RequestParam注解

    二、关于在Mapper.java中方法参数加入@Param注解是为什么？
    答：新版本MyBatis：更严格的参数绑定，建议明确使用@Param
       若有多个参数：必须使用@Param明确指定参数名，否则会出现参数绑定错误

    三、数据库中BigInt 对应 Java中的Long
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.medical</groupId>
    <artifactId>medical-cloud</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <name>medical-cloud</name>
    <description>医云智能互动系统</description>

    <modules>
        <module>medical-common</module>
        <module>medical-pojo</module>
        <module>medical-server</module>
    </modules>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring-boot.version>3.2.0</spring-boot.version>
        <mysql.version>8.0.33</mysql.version>
        <mybatis-plus.version>3.5.4</mybatis-plus.version>
        <mybatis.spring>3.0.3</mybatis.spring>
        <druid.version>1.2.21</druid.version>
        <fastjson2.version>2.0.47</fastjson2.version>
        <commons.lang3.version>3.14.0</commons.lang3.version>
        <pagehelper.version>1.4.7</pagehelper.version>
        <jwt.version>0.12.5</jwt.version>
        <lombok.version>1.18.30</lombok.version>
        <knife4j.version>4.3.0</knife4j.version>
        <aspectj.version>1.9.21</aspectj.version>
        <jaxb-api.version>4.0.1</jaxb-api.version>
        <poi.version>5.2.5</poi.version>
        <springdoc.version>2.2.0</springdoc.version>
        <aliyun.sdk.oss>3.17.4</aliyun.sdk.oss>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot BOM -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- MySQL -->
            <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <version>${mysql.version}</version>
            </dependency>

            <!-- Druid数据源 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-3-starter</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- MyBatis Plus -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <!-- MyBatis Spring -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis.spring}</version>
            </dependency>

            <!-- FastJSON2 -->
            <dependency>
                <groupId>com.alibaba.fastjson2</groupId>
                <artifactId>fastjson2</artifactId>
                <version>${fastjson2.version}</version>
            </dependency>

            <!-- Commons Lang3 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang3.version}</version>
            </dependency>

            <!-- PageHelper -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>

            <!-- Redis -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-redis</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>

            <!-- JWT -->
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-api</artifactId>
                <version>${jwt.version}</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-impl</artifactId>
                <version>${jwt.version}</version>
            </dependency>
            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt-jackson</artifactId>
                <version>${jwt.version}</version>
            </dependency>

            <!-- JAXB API -->
            <dependency>
                <groupId>jakarta.xml.bind</groupId>
                <artifactId>jakarta.xml.bind-api</artifactId>
                <version>${jaxb-api.version}</version>
            </dependency>



            <!-- Lombok -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!-- Knife4j API文档 -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>

            <!-- Spring Boot AOP Starter -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-aop</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>

            <!-- AspectJ -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${aspectj.version}</version>
            </dependency>

            <!-- 阿里云OSS -->
            <dependency>
                <groupId>com.aliyun.oss</groupId>
                <artifactId>aliyun-sdk-oss</artifactId>
                <version>${aliyun.sdk.oss}</version>
            </dependency>
        </dependencies>

    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
